#!/usr/bin/make -f

SHELL := bash
make := $(lastword $(MAKEFILE_LIST))
$(make):;
. := $(or $(filter $(words $(MAKECMDGOALS)), 1), $(error usage: $(make) LOGFILE|install|help))

define help
echo -e "\tmake -f $(MAKEFILE_LIST) install [bin=PATH (default /usr/local/bin)]"
echo -e "\t\tinstall this Makefile in $(bin)"
echo -e "\t$(make) LOGFILE"
echo -e "\t\tdispatch lines of LOGFILE in LOGDIR selected by basename of origin filename"
echo -e "\t$(make) [OPTIONS] LOGFILE"
echo -e "\t\tpass OPTIONS as Make variables"
echo -e "\t\t\t[erase=BOOL (default False)]"
echo -e "\t\t\t[prefix=PATH (default /space/log2)]"
echo -e "\t\t\t[logdir=PATH (default basename(LOGFILE).d]"
echo -e "\t\t\t[pipe=BOOL (default FALSE)]"
echo -e ""
echo -e "\t\tset erase to awk True (!"" && !0) to not concatenate upon destination files"
echo -e "\t\tset pipe to Make True (!"") to read from STDIN instead of LOGFILE"
endef

bin ?= /usr/local/bin
ifeq ($(if $(filter $(MAKECMDGOALS), install),T),T)
install := $(bin)/$(make)
$(install): $(make); sudo install $< $(@D)
install: $(install);
else ifeq ($(if $(filter $(MAKECMDGOALS), help),T),T)
help:; @$($@)
else

prefix    ?= /space/log2
unmatched ?= UNMATCHED.log
logdir    ?= $(basename $@).d/

define awk
BEGIN {
  regexp = "^.* \\[$(prefix)/(.*)]: (.*)$$";
  system("mkdir -p $(logdir)");
}
 match($$0, regexp, m) { if (erase) print m[2] > logdir m[1]; else print m[2] >> logdir m[1]; fflush() }
!match($$0, regexp, m) { print $$0  >> logdir "$(unmatched)"; fflush() }
endef

vars = $(foreach _, $1, -v $_=$($_))
$(MAKECMDGOALS):; @gawk $(call vars, erase unmatched logdir) '$(strip $(awk))' $(if $(pipe),,$@)
.PHONY: $(MAKECMDGOALS)

endif

# Local Variables:
# Mode: makefile-gmake
# End:
